// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: geoip_service.proto

package proto_geoip_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GeoIpService_GetLocationByIP_FullMethodName = "/gomessage.com.geoip_service.GeoIpService/GetLocationByIP"
)

// GeoIpServiceClient is the client API for GeoIpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeoIpServiceClient interface {
	GetLocationByIP(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error)
}

type geoIpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoIpServiceClient(cc grpc.ClientConnInterface) GeoIpServiceClient {
	return &geoIpServiceClient{cc}
}

func (c *geoIpServiceClient) GetLocationByIP(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*GetLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocationResponse)
	err := c.cc.Invoke(ctx, GeoIpService_GetLocationByIP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoIpServiceServer is the server API for GeoIpService service.
// All implementations must embed UnimplementedGeoIpServiceServer
// for forward compatibility.
type GeoIpServiceServer interface {
	GetLocationByIP(context.Context, *GetLocationRequest) (*GetLocationResponse, error)
	mustEmbedUnimplementedGeoIpServiceServer()
}

// UnimplementedGeoIpServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeoIpServiceServer struct{}

func (UnimplementedGeoIpServiceServer) GetLocationByIP(context.Context, *GetLocationRequest) (*GetLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationByIP not implemented")
}
func (UnimplementedGeoIpServiceServer) mustEmbedUnimplementedGeoIpServiceServer() {}
func (UnimplementedGeoIpServiceServer) testEmbeddedByValue()                      {}

// UnsafeGeoIpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeoIpServiceServer will
// result in compilation errors.
type UnsafeGeoIpServiceServer interface {
	mustEmbedUnimplementedGeoIpServiceServer()
}

func RegisterGeoIpServiceServer(s grpc.ServiceRegistrar, srv GeoIpServiceServer) {
	// If the following call pancis, it indicates UnimplementedGeoIpServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GeoIpService_ServiceDesc, srv)
}

func _GeoIpService_GetLocationByIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoIpServiceServer).GetLocationByIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoIpService_GetLocationByIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoIpServiceServer).GetLocationByIP(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeoIpService_ServiceDesc is the grpc.ServiceDesc for GeoIpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeoIpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gomessage.com.geoip_service.GeoIpService",
	HandlerType: (*GeoIpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLocationByIP",
			Handler:    _GeoIpService_GetLocationByIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geoip_service.proto",
}
